/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!***************************************!*\
  !*** ./src/content/deepl_injector.js ***!
  \***************************************/
/**
 * Update the href of the frame to get the translate result and send it back to translator.
 *
 * @returns {void} nothing
 */
(() => {
  /**
   * Do not inject in normal page.
   */
  if (window === window.parent) return;
  window.addEventListener("message", msg => {
    if (!msg.data.type || msg.data.type !== "edge_translate_deepl_request") return;

    /**
     * Count the time that we have waited for.
     */
    let checkCnt = 0;

    /**
     * Update the href of the frame to get the translate result.
     */
    window.location.href = msg.data.url;

    /**
     * Periodically check whether the translating has been finished.
     */
    const intervalId = setInterval(() => {
      /**
       * "lmt__target_textarea" is the element which holds the translate result.
       */
      const targetTextAreas = document.getElementsByClassName("lmt__target_textarea");
      const result = targetTextAreas && targetTextAreas.length > 0 && targetTextAreas[0].innerText ? targetTextAreas[0].innerText.trim() : "";
      if (result.length > 0) {
        /**
         * Got the translating result, send it back.
         */
        window.parent.postMessage({
          type: "edge_translate_deepl_response",
          status: 200,
          result
        }, chrome.runtime.getURL(""));
        clearInterval(intervalId);
      } else if (++checkCnt > 10) {
        /**
         * Waited for too long, stop waiting and signal translator.
         */
        window.parent.postMessage({
          type: "edge_translate_deepl_response",
          status: 504,
          errorMsg: "Wait result timeout!"
        }, chrome.runtime.getURL(""));
        clearInterval(intervalId);
      }
    }, 500);
  });
})();
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2NvbnRlbnQvZGVlcGxfaW5qZWN0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxNQUFNO0VBQ0g7QUFDSjtBQUNBO0VBQ0ksSUFBSUEsTUFBTSxLQUFLQSxNQUFNLENBQUNDLE1BQU0sRUFBRTtFQUU5QkQsTUFBTSxDQUFDRSxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUdDLEdBQUcsSUFBSztJQUN4QyxJQUFJLENBQUNBLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDQyxJQUFJLElBQUlGLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDQyxJQUFJLEtBQUssOEJBQThCLEVBQUU7O0lBRXhFO0FBQ1I7QUFDQTtJQUNRLElBQUlDLFFBQVEsR0FBRyxDQUFDOztJQUVoQjtBQUNSO0FBQ0E7SUFDUU4sTUFBTSxDQUFDTyxRQUFRLENBQUNDLElBQUksR0FBR0wsR0FBRyxDQUFDQyxJQUFJLENBQUNLLEdBQUc7O0lBRW5DO0FBQ1I7QUFDQTtJQUNRLE1BQU1DLFVBQVUsR0FBR0MsV0FBVyxDQUFDLE1BQU07TUFDakM7QUFDWjtBQUNBO01BQ1ksTUFBTUMsZUFBZSxHQUFHQyxRQUFRLENBQUNDLHNCQUFzQixDQUFDLHNCQUFzQixDQUFDO01BQy9FLE1BQU1DLE1BQU0sR0FDUkgsZUFBZSxJQUFJQSxlQUFlLENBQUNJLE1BQU0sR0FBRyxDQUFDLElBQUlKLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQ0ssU0FBUyxHQUN2RUwsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDSyxTQUFTLENBQUNDLElBQUksQ0FBQyxDQUFDLEdBQ25DLEVBQUU7TUFFWixJQUFJSCxNQUFNLENBQUNDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDbkI7QUFDaEI7QUFDQTtRQUNnQmhCLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDa0IsV0FBVyxDQUNyQjtVQUFFZCxJQUFJLEVBQUUsK0JBQStCO1VBQUVlLE1BQU0sRUFBRSxHQUFHO1VBQUVMO1FBQU8sQ0FBQyxFQUM5RE0sTUFBTSxDQUFDQyxPQUFPLENBQUNDLE1BQU0sQ0FBQyxFQUFFLENBQzVCLENBQUM7UUFDREMsYUFBYSxDQUFDZCxVQUFVLENBQUM7TUFDN0IsQ0FBQyxNQUFNLElBQUksRUFBRUosUUFBUSxHQUFHLEVBQUUsRUFBRTtRQUN4QjtBQUNoQjtBQUNBO1FBQ2dCTixNQUFNLENBQUNDLE1BQU0sQ0FBQ2tCLFdBQVcsQ0FDckI7VUFDSWQsSUFBSSxFQUFFLCtCQUErQjtVQUNyQ2UsTUFBTSxFQUFFLEdBQUc7VUFDWEssUUFBUSxFQUFFO1FBQ2QsQ0FBQyxFQUNESixNQUFNLENBQUNDLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDLEVBQUUsQ0FDNUIsQ0FBQztRQUNEQyxhQUFhLENBQUNkLFVBQVUsQ0FBQztNQUM3QjtJQUNKLENBQUMsRUFBRSxHQUFHLENBQUM7RUFDWCxDQUFDLENBQUM7QUFDTixDQUFDLEVBQUUsQ0FBQyxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWRnZV90cmFuc2xhdGUvLi9zcmMvY29udGVudC9kZWVwbF9pbmplY3Rvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVwZGF0ZSB0aGUgaHJlZiBvZiB0aGUgZnJhbWUgdG8gZ2V0IHRoZSB0cmFuc2xhdGUgcmVzdWx0IGFuZCBzZW5kIGl0IGJhY2sgdG8gdHJhbnNsYXRvci5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH0gbm90aGluZ1xuICovXG4oKCkgPT4ge1xuICAgIC8qKlxuICAgICAqIERvIG5vdCBpbmplY3QgaW4gbm9ybWFsIHBhZ2UuXG4gICAgICovXG4gICAgaWYgKHdpbmRvdyA9PT0gd2luZG93LnBhcmVudCkgcmV0dXJuO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIChtc2cpID0+IHtcbiAgICAgICAgaWYgKCFtc2cuZGF0YS50eXBlIHx8IG1zZy5kYXRhLnR5cGUgIT09IFwiZWRnZV90cmFuc2xhdGVfZGVlcGxfcmVxdWVzdFwiKSByZXR1cm47XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvdW50IHRoZSB0aW1lIHRoYXQgd2UgaGF2ZSB3YWl0ZWQgZm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IGNoZWNrQ250ID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlIHRoZSBocmVmIG9mIHRoZSBmcmFtZSB0byBnZXQgdGhlIHRyYW5zbGF0ZSByZXN1bHQuXG4gICAgICAgICAqL1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IG1zZy5kYXRhLnVybDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUGVyaW9kaWNhbGx5IGNoZWNrIHdoZXRoZXIgdGhlIHRyYW5zbGF0aW5nIGhhcyBiZWVuIGZpbmlzaGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogXCJsbXRfX3RhcmdldF90ZXh0YXJlYVwiIGlzIHRoZSBlbGVtZW50IHdoaWNoIGhvbGRzIHRoZSB0cmFuc2xhdGUgcmVzdWx0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRUZXh0QXJlYXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwibG10X190YXJnZXRfdGV4dGFyZWFcIik7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPVxuICAgICAgICAgICAgICAgIHRhcmdldFRleHRBcmVhcyAmJiB0YXJnZXRUZXh0QXJlYXMubGVuZ3RoID4gMCAmJiB0YXJnZXRUZXh0QXJlYXNbMF0uaW5uZXJUZXh0XG4gICAgICAgICAgICAgICAgICAgID8gdGFyZ2V0VGV4dEFyZWFzWzBdLmlubmVyVGV4dC50cmltKClcbiAgICAgICAgICAgICAgICAgICAgOiBcIlwiO1xuXG4gICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBHb3QgdGhlIHRyYW5zbGF0aW5nIHJlc3VsdCwgc2VuZCBpdCBiYWNrLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHdpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgIHsgdHlwZTogXCJlZGdlX3RyYW5zbGF0ZV9kZWVwbF9yZXNwb25zZVwiLCBzdGF0dXM6IDIwMCwgcmVzdWx0IH0sXG4gICAgICAgICAgICAgICAgICAgIGNocm9tZS5ydW50aW1lLmdldFVSTChcIlwiKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKytjaGVja0NudCA+IDEwKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogV2FpdGVkIGZvciB0b28gbG9uZywgc3RvcCB3YWl0aW5nIGFuZCBzaWduYWwgdHJhbnNsYXRvci5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImVkZ2VfdHJhbnNsYXRlX2RlZXBsX3Jlc3BvbnNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDUwNCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTXNnOiBcIldhaXQgcmVzdWx0IHRpbWVvdXQhXCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNocm9tZS5ydW50aW1lLmdldFVSTChcIlwiKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgNTAwKTtcbiAgICB9KTtcbn0pKCk7XG4iXSwibmFtZXMiOlsid2luZG93IiwicGFyZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm1zZyIsImRhdGEiLCJ0eXBlIiwiY2hlY2tDbnQiLCJsb2NhdGlvbiIsImhyZWYiLCJ1cmwiLCJpbnRlcnZhbElkIiwic2V0SW50ZXJ2YWwiLCJ0YXJnZXRUZXh0QXJlYXMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJyZXN1bHQiLCJsZW5ndGgiLCJpbm5lclRleHQiLCJ0cmltIiwicG9zdE1lc3NhZ2UiLCJzdGF0dXMiLCJjaHJvbWUiLCJydW50aW1lIiwiZ2V0VVJMIiwiY2xlYXJJbnRlcnZhbCIsImVycm9yTXNnIl0sInNvdXJjZVJvb3QiOiIifQ==